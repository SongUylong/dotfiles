# Schema definition for validation by TOML linters
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"  # JSON schema to validate the config

[mgr]  # File manager settings
ratio          = [ 1, 4, 3 ]         # Column width ratio for file manager panes: left:middle:right
sort_by        = "alphabetical"      # Sort files alphabetically
sort_sensitive = false               # Case-insensitive sorting
sort_reverse   = false               # Do not reverse the sort order
sort_dir_first = true                # Show directories before files
sort_translit  = false               # Do not transliterate filenames for sorting
linemode       = "none"              # No line mode decoration
show_hidden    = false               # Hide hidden files (starting with .)
show_symlink   = true                # Show symbolic links
scrolloff      = 5                   # Keep 5 lines visible above/below cursor when scrolling
mouse_events   = [ "click", "scroll" ] # Enable mouse click and scroll interactions
title_format   = "Yazi: {cwd}"       # Window title format; {cwd} shows current directory

[preview]  # File preview settings
wrap            = "no"               # Do not wrap long lines in preview
tab_size        = 2                  # Tab width in spaces
max_width       = 600                # Max preview width in pixels
max_height      = 900                # Max preview height in pixels
cache_dir       = ""                 # Directory to cache previews (empty = default)
image_delay     = 30                 # Delay between frames for animated images in preview
image_filter    = "triangle"         # Image filter method for scaling
image_quality   = 75                 # Image preview quality (percentage)
ueberzug_scale  = 1                  # Scaling factor for ueberzug image previews
ueberzug_offset = [ 0, 0, 0, 0 ]     # [top, right, bottom, left] offset for image preview

[opener]  # Commands to open/edit files
edit = [
    { run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },  # Use system editor (vi if $EDITOR not set), block until done
    { run = 'code %*',    orphan = true, desc = "code",           for = "windows" }, # Open in VS Code (non-blocking) on Windows
    { run = 'code -w %*', block = true,  desc = "code (block)",   for = "windows" }  # Open in VS Code (blocking) on Windows
]
open = [
    { run = 'xdg-open "$1"',                desc = "Open", for = "linux" },     # Open file with default app on Linux
    { run = 'open "$@"',                    desc = "Open", for = "macos" },     # Open file on macOS
    { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },    # Open file on Windows
    { run = 'termux-open "$1"',             desc = "Open", for = "android" }    # Open file on Termux/Android
]
reveal = [
    { run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" }, # Reveal file in folder (Linux)
    { run = 'open -R "$1"',                         desc = "Reveal", for = "macos" }, # Reveal file in Finder (macOS)
    { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" }, # Reveal file in Explorer (Windows)
    { run = 'termux-open "$(dirname "$1")"',        desc = "Reveal", for = "android" }, # Reveal folder in Termux
    { run = '''clear; exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" } # Show EXIF info on Unix
]
extract = [
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },  # List archive contents on Unix
    { run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" } # List archive contents on Windows
]
play = [
    { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },  # Play media file with mpv (non-blocking) on Unix
    { run = 'mpv --force-window %*', orphan = true, for = "windows" }, # Play media file with mpv on Windows
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" } # Show media info
]

[open]  # Rules for opening files based on type
rules = [
    { name = "*/", use = [ "edit", "open", "reveal" ] },                               # Folders
    { mime = "text/*", use = [ "edit", "reveal" ] },                                   # Text files
    { mime = "image/*", use = [ "open", "reveal" ] },                                   # Images
    { mime = "{audio,video}/*", use = [ "play", "reveal" ] },                           # Media files
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] }, # Archives
    { mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },                 # JSON files
    { mime = "*/javascript", use = [ "edit", "reveal" ] },                              # JS files
    { mime = "inode/empty", use = [ "edit", "reveal" ] },                                # Empty files
    { name = "*", use = [ "open", "reveal" ] }                                           # Fallback for all other files
]

[tasks]  # Background task settings
micro_workers    = 10             # Number of small background workers
macro_workers    = 10             # Number of large background workers
bizarre_retry    = 3              # Retry count for unusual errors
image_alloc      = 536870912      # Memory allocated for images (512MB)
image_bound      = [ 5000, 5000 ] # Maximum image dimensions
suppress_preload = false          # Preload images/videos or not

[plugin]  # Plugin system configuration
fetchers = [
    { id = "mime", name = "*", run = "mime", prio = "high" }  # Use MIME type fetcher with high priority
]
spotters = [
    { name = "*/", run = "folder" },                            # Identify folders
    { mime = "text/*", run = "code" },                          # Spot text files
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" }, # Spot code-like files
    { mime = "image/{avif,hei?,jxl}", run = "magick" },         # Spot special images
    { mime = "image/svg+xml", run = "svg" },                    # Spot SVG images
    { mime = "image/*", run = "image" },                        # Spot general images
    { mime = "video/*", run = "video" },                        # Spot video files
    { name = "*", run = "file" }                                 # Fallback spotter
]
preloaders = [
    { mime = "image/{avif,hei?,jxl}", run = "magick" },   # Preload certain images
    { mime = "image/svg+xml", run = "svg" },              # Preload SVG
    { mime = "image/*", run = "image" },                 # Preload general images
    { mime = "video/*", run = "video" },                 # Preload videos
    { mime = "application/pdf", run = "pdf" },           # Preload PDFs
    { mime = "font/*", run = "font" },                   # Preload fonts
    { mime = "application/ms-opentype", run = "font" }   # Preload fonts
]
previewers = [
    { name = "*/", run = "folder" },  # Preview folders
    { mime = "text/*", run = "code" }, # Preview text files
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" }, # Preview code
    { mime = "application/{json,ndjson}", run = "json" }, # Preview JSON
    { mime = "image/{avif,hei?,jxl}", run = "magick" },  # Preview certain images
    { mime = "image/svg+xml", run = "svg" },             # Preview SVG
    { mime = "image/*", run = "image" },                # Preview general images
    { mime = "video/*", run = "video" },                # Preview videos
    { mime = "application/pdf", run = "pdf" },          # Preview PDFs
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" }, # Preview archives
    { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" }, # Preview packages
    { name = "*.{AppImage,appimage}", run = "archive" }, # Preview AppImages
    { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" }, # Preview disk images
    { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" }, # Preview virtual disks
    { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" }, # Preview disk image files
    { mime = "font/*", run = "font" },                   # Preview fonts
    { mime = "application/ms-opentype", run = "font" },  # Preview fonts
    { mime = "inode/empty", run = "empty" },             # Preview empty files
    { name = "*", run = "file" }                         # Fallback previewer
]

[input]  # Input/prompt settings
cursor_blink = false  # Disable cursor blinking

# cd
cd_title  = "Change directory:"  # Prompt title
cd_origin = "top-center"         # Position of input prompt
cd_offset = [ 0, 2, 50, 3 ]      # Offset and size of input prompt [x, y, width, height]

# create
create_title  = [ "Create:", "Create (dir):" ]  # Prompt titles for files and directories
create_origin = "top-center"                   # Prompt position
create_offset = [ 0, 2, 50, 3 ]                # Offset/size

# rename
rename_title  = "Rename:"      # Prompt title
rename_origin = "hovered"      # Prompt appears over hovered item
rename_offset = [ 0, 1, 50, 3 ] # Offset/size

# filter
filter_title  = "Filter:"      # Filter prompt title
filter_origin = "top-center"   # Position
filter_offset = [ 0, 2, 50, 3 ] # Offset/size

# find
find_title  = [ "Find next:", "Find previous:" ] # Titles for find prompt
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:" # Search prompt title
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]  # Shell prompt titles
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]  # Confirmation dialogs
# trash
trash_title 	= "Trash {n} selected file{s}?"  # Trash dialog title
trash_origin	= "center"                       # Center screen
trash_offset	= [ 0, 0, 70, 20 ]               # Dialog size/position

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin_
